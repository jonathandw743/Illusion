[manifest]
version = "1.0.0"
dump_lua = true
priority = 6969

# [[patches]]
# [patches.module]
# source = "internal/init.lua"
# before = "main.lua"
# name = "blueprint.init"

# # Add core functionality
# [[patches]]
# [patches.copy]
# target = "main.lua"
# position = "append"
# sources = [
#     "blueprint.lua",
# ]

# [[patches]]
# [patches.pattern]
# target = "game.lua"
# pattern = '''
# if G.AA_CANVAS then 
# 	love.graphics.push()
# 		love.graphics.scale(1/G.CANV_SCALE)
# 		love.graphics.draw(G.AA_CANVAS, 0, 0)
# 	love.graphics.pop()
# end
# '''
# position = "at"
# payload = '''
# if G.AA_CANVAS then 
# 	love.graphics.push()
# 		love.graphics.scale(1/G.CANV_SCALE)
# 		love.graphics.draw(G.AA_CANVAS, 0, 0)
# 	love.graphics.pop()
# else
# 	print("sdkjfdsjhfk")
# end
# '''
# match_indent = true










# mod stuff

[[patches]]
[patches.module]
source = "nativefs.lua"
before = "main.lua"
name = "illusion_mod.nativefs"

[[patches]]
[patches.copy]
target = "main.lua"
position = "append"
sources = ["init.lua"]

# image edge fix

[[patches]]
[patches.pattern]
target = "game.lua"
position = "at"
match_indent = true
pattern = '''
self.ANIMATION_ATLAS[self.animation_atli[i].name].image = love.graphics.newImage(self.animation_atli[i].path, {mipmaps = true, dpiscale = self.SETTINGS.GRAPHICS.texture_scaling})
'''
payload = '''
self.ANIMATION_ATLAS[self.animation_atli[i].name].image = love.graphics.newImage(IllusionMod.image_data_or_path(self.animation_atli[i]), {mipmaps = true, dpiscale = self.SETTINGS.GRAPHICS.texture_scaling})
'''

[[patches]]
[patches.pattern]
target = "game.lua"
position = "at"
match_indent = true
pattern = '''
self.ASSET_ATLAS[self.asset_atli[i].name].image = love.graphics.newImage(self.asset_atli[i].path, {mipmaps = true, dpiscale = self.SETTINGS.GRAPHICS.texture_scaling})
'''
payload = '''
self.ASSET_ATLAS[self.asset_atli[i].name].image = love.graphics.newImage(IllusionMod.image_data_or_path(self.asset_atli[i]), {mipmaps = true, dpiscale = self.SETTINGS.GRAPHICS.texture_scaling})
'''

[[patches]]
[patches.pattern]
target = "game.lua"
position = "at"
match_indent = true
pattern = '''
self.ASSET_ATLAS[self.asset_images[i].name].image = love.graphics.newImage(self.asset_images[i].path, {mipmaps = true, dpiscale = 1})
'''
payload = '''
self.ASSET_ATLAS[self.asset_images[i].name].image = love.graphics.newImage(IllusionMod.image_data_or_path(self.asset_images[i]), {mipmaps = true, dpiscale = 1})
'''

# [[patches]]
# [patches.pattern]
# target = "game.lua"
# pattern = '''
# love.graphics.draw(self.CANVAS, 0, 0)
# '''
# position = "before"
# payload = '''
# love.graphics.setCanvas()
# '''
# match_indent = true
















# better anti-aliasing

[[patches]]
[patches.pattern]
target = "main.lua"
# this just introduces unnecessary blurring
pattern = '''
G.CANVAS:setFilter('linear', 'linear')
'''
position = "at"
payload = '''
G.CANVAS:setFilter('nearest', 'nearest')
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
position = "at"
match_indent = true
pattern = '''
self.SETTINGS.GRAPHICS.texture_scaling = self.SETTINGS.GRAPHICS.texture_scaling or 2
'''
# for my method of anti-alisasing, 1x textures are used
payload = '''
self.SETTINGS.GRAPHICS.texture_scaling = self.SETTINGS.GRAPHICS.texture_scaling or 1
'''

[[patches]]
[patches.pattern]
target = "game.lua"
position = "after"
match_indent = true
pattern = '''
self.SHADERS[shader_name] = love.graphics.newShader("resources/shaders/"..filename)
'''
payload = '''
self.SHADERS[shader_name] = love.graphics.newShader(IllusionMod.shader_text_or_path({ path = "resources/shaders/"..filename, name = shader_name }))
'''



# [[patches]]
# [patches.pattern]
# target = "game.lua"
# position = "at"
# match_indent = true
# pattern = '''
# love.graphics.setDefaultFilter(
#     self.SETTINGS.GRAPHICS.texture_scaling == 1 and 'nearest' or 'linear',
#     self.SETTINGS.GRAPHICS.texture_scaling == 1 and 'nearest' or 'linear', 1)'''
# payload = '''
# love.graphics.setDefaultFilter(
#     self.SETTINGS.GRAPHICS.texture_scaling == 1 and 'linear' or 'linear',
#     self.SETTINGS.GRAPHICS.texture_scaling == 1 and 'linear' or 'linear', 1)'''





# payload = '''
#             if shader_name == "dissolve" then
#                 print(love.graphics.getSupported())
#                 self.SHADERS["dissolve"] = love.graphics.newShader([[
# #pragma language glsl3

# #if defined(VERTEX) || __VERSION__ > 100 || defined(GL_FRAGMENT_PRECISION_HIGH)
# 	#define MY_HIGHP_OR_MEDIUMP highp
# #else
# 	#define MY_HIGHP_OR_MEDIUMP mediump
# #endif
# // #define MYHIGHP_OR_MEDIUMP highp

# #ifdef PIXEL
# extern MY_HIGHP_OR_MEDIUMP float dissolve;
# extern MY_HIGHP_OR_MEDIUMP float time;
# extern MY_HIGHP_OR_MEDIUMP vec4 texture_details;
# extern MY_HIGHP_OR_MEDIUMP vec2 image_details;
# extern bool shadow;
# extern MY_HIGHP_OR_MEDIUMP vec4 burn_colour_1;
# extern MY_HIGHP_OR_MEDIUMP vec4 burn_colour_2;

# vec4 dissolve_mask(vec4 tex, vec2 texture_coords, vec2 uv)
# {
#     if (dissolve < 0.001) {
#         return vec4(shadow ? vec3(0.,0.,0.) : tex.xyz, shadow ? tex.a*0.3: tex.a);
#     }

#     MY_HIGHP_OR_MEDIUMP float adjusted_dissolve = (dissolve*dissolve*(3.-2.*dissolve))*1.02 - 0.01; //Adjusting 0.0-1.0 to fall to -0.1 - 1.1 scale so the mask does not pause at extreme values

# 	MY_HIGHP_OR_MEDIUMP float t = time * 10.0 + 2003.;
# 	MY_HIGHP_OR_MEDIUMP vec2 floored_uv = (floor((uv*texture_details.ba)))/max(texture_details.b, texture_details.a);
#     MY_HIGHP_OR_MEDIUMP vec2 uv_scaled_centered = (floored_uv - 0.5) * 2.3 * max(texture_details.b, texture_details.a);

# 	MY_HIGHP_OR_MEDIUMP vec2 field_part1 = uv_scaled_centered + 50.*vec2(sin(-t / 143.6340), cos(-t / 99.4324));
# 	MY_HIGHP_OR_MEDIUMP vec2 field_part2 = uv_scaled_centered + 50.*vec2(cos( t / 53.1532),  cos( t / 61.4532));
# 	MY_HIGHP_OR_MEDIUMP vec2 field_part3 = uv_scaled_centered + 50.*vec2(sin(-t / 87.53218), sin(-t / 49.0000));

#     MY_HIGHP_OR_MEDIUMP float field = (1.+ (
#         cos(length(field_part1) / 19.483) + sin(length(field_part2) / 33.155) * cos(field_part2.y / 15.73) +
#         cos(length(field_part3) / 27.193) * sin(field_part3.x / 21.92) ))/2.;
#     MY_HIGHP_OR_MEDIUMP vec2 borders = vec2(0.2, 0.8);

#     MY_HIGHP_OR_MEDIUMP float res = (.5 + .5* cos( (adjusted_dissolve) / 82.612 + ( field + -.5 ) *3.14))
#     - (floored_uv.x > borders.y ? (floored_uv.x - borders.y)*(5. + 5.*dissolve) : 0.)*(dissolve)
#     - (floored_uv.y > borders.y ? (floored_uv.y - borders.y)*(5. + 5.*dissolve) : 0.)*(dissolve)
#     - (floored_uv.x < borders.x ? (borders.x - floored_uv.x)*(5. + 5.*dissolve) : 0.)*(dissolve)
#     - (floored_uv.y < borders.x ? (borders.x - floored_uv.y)*(5. + 5.*dissolve) : 0.)*(dissolve);

#     if (tex.a > 0.01 && burn_colour_1.a > 0.01 && !shadow && res < adjusted_dissolve + 0.8*(0.5-abs(adjusted_dissolve-0.5)) && res > adjusted_dissolve) {
#         if (!shadow && res < adjusted_dissolve + 0.5*(0.5-abs(adjusted_dissolve-0.5)) && res > adjusted_dissolve) {
#             tex.rgba = burn_colour_1.rgba;
#         } else if (burn_colour_2.a > 0.01) {
#             tex.rgba = burn_colour_2.rgba;
#         }
#     }

#     return vec4(shadow ? vec3(0.,0.,0.) : tex.xyz, res > adjusted_dissolve ? (shadow ? tex.a*0.3: tex.a) : .0);
# }

# //#define FAST_AA(new_uv, uv, texture_pixel_size) new_uv = floor(uv / texture_pixel_size + 0.5) * texture_pixel_size + clamp((mod(uv + texture_pixel_size * 0.5, texture_pixel_size) - texture_pixel_size * 0.5) / fwidth(uv), -0.5, 0.5) * texture_pixel_size

# vec2 fast_aa(vec2 uv, vec2 texture_pixel_size, vec2 fwidth_uv) {
# 	vec2 closest_corner = uv;
# 	closest_corner /= texture_pixel_size;
# 	// round is buggy
# 	//closest_corner = round(closest_corner);
# 	closest_corner = floor(closest_corner + 0.5);
# 	closest_corner *= texture_pixel_size;

# 	vec2 d = uv;
# 	d += texture_pixel_size * 0.5;
# 	d = mod(d, texture_pixel_size);
# 	d -= texture_pixel_size * 0.5;
# 	d /= fwidth_uv;

# 	return closest_corner + clamp(d * 1.0, -0.5, 0.5) * texture_pixel_size;
# }

# vec4 effect( vec4 colour, sampler2D texture, vec2 texture_coords, vec2 screen_coords )
# {
#     MY_HIGHP_OR_MEDIUMP vec4 tex = texture2D( texture, fast_aa(texture_coords, 1.0 / vec2(textureSize(texture, 0)), fwidth(texture_coords)));
#     MY_HIGHP_OR_MEDIUMP vec2 uv = (((texture_coords)*(image_details)) - texture_details.xy*texture_details.ba)/texture_details.ba;

#     if (!shadow &&  dissolve > 0.01){
#         if (burn_colour_2.a > 0.01){
#             tex.rgb = tex.rgb*(1.-0.6*dissolve) + 0.6*burn_colour_2.rgb*dissolve;
#         } else if (burn_colour_1.a > 0.01){
#             tex.rgb = tex.rgb*(1.-0.6*dissolve) + 0.6*burn_colour_1.rgb*dissolve;
#         }
#     }

#     return dissolve_mask(tex, texture_coords, uv);
# }
# #endif

# #ifdef VERTEX
# extern MY_HIGHP_OR_MEDIUMP vec2 mouse_screen_pos;
# extern MY_HIGHP_OR_MEDIUMP float hovering;
# extern MY_HIGHP_OR_MEDIUMP float screen_scale;

# vec4 position( mat4 transform_projection, vec4 vertex_position )
# {
#     if (hovering <= 0.){
#         return transform_projection * vertex_position;
#     }
#     MY_HIGHP_OR_MEDIUMP float mid_dist = length(vertex_position.xy - 0.5*love_ScreenSize.xy)/length(love_ScreenSize.xy);
#     MY_HIGHP_OR_MEDIUMP vec2 mouse_offset = (vertex_position.xy - mouse_screen_pos.xy)/screen_scale;
#     MY_HIGHP_OR_MEDIUMP float scale = 0.2*(-0.03 - 0.3*max(0., 0.3-mid_dist))
#                 *hovering*(length(mouse_offset)*length(mouse_offset))/(2. -mid_dist);

#     return transform_projection * vertex_position + vec4(0,0,0,scale);
# }
# #endif
# ]])
#             else
#                 self.SHADERS[shader_name] = love.graphics.newShader("resources/shaders/"..filename)
#             end
# '''
# match_indent = false


































# [[patches]]
# [patches.pattern]
# target = "game.lua"
# pattern = '''
# local shader_files = love.filesystem.getDirectoryItems("resources/shaders")'''
# position = "before"
# payload = '''
# Blueprint.load_shaders()
# '''
# match_indent = true

# Test for joker menu
#[[patches]]
#[patches.pattern]
#target = "functions/UI_definitions.lua"
#pattern = '''
#function G.UIDEF.card_focus_ui(card)'''
#position = "after"
#payload = '''
#    local name = "I dunno"
#    if card.config and card.config.center then
#        name = card.config.center.key
#    end
#    Blueprint.log("hi hello im " .. tostring(name).. ". highlighed: "..tostring(card.highlighted))
#'''
#match_indent = true

# [[patches]]
# [patches.pattern]
# target = "card.lua"
# pattern = '''
# elseif self.sprite_facing == 'back' then'''
# position = "before"
# payload = '''
#     if self.blueprint_sprite_copy and self.children.floating_sprite then
#         local scale_mod = 0.07 + 0.02*math.sin(1.8*G.TIMERS.REAL) + 0.00*math.sin((G.TIMERS.REAL - math.floor(G.TIMERS.REAL))*math.pi*14)*(1 - (G.TIMERS.REAL - math.floor(G.TIMERS.REAL)))^3
#         local rotate_mod = 0.05*math.sin(1.219*G.TIMERS.REAL) + 0.00*math.sin((G.TIMERS.REAL)*math.pi*5)*(1 - (G.TIMERS.REAL - math.floor(G.TIMERS.REAL)))^2

#         if self.blueprint_copy_key == 'j_hologram' then
#             self.hover_tilt = self.hover_tilt*1.5
#             self.children.floating_sprite:draw_shader('hologram', nil, self.ARGS.send_to_shader, nil, self.children.center, 2*scale_mod, 2*rotate_mod)
#             self.hover_tilt = self.hover_tilt/1.5
#         else
#             self.children.floating_sprite:draw_shader('dissolve',0, nil, nil, self.children.center,scale_mod, rotate_mod,nil, 0.1 + 0.03*math.sin(1.8*G.TIMERS.REAL),nil, 0.6)
#             self.children.floating_sprite:draw_shader('dissolve', nil, nil, nil, self.children.center, scale_mod, rotate_mod)
#         end
#         --self.children.floating_sprite:draw_shader('dissolve',   0, nil, nil, self.children.center, scale_mod, rotate_mod, nil, 0.1 + 0.03 * math.sin(1.8 * G.TIMERS.REAL), nil, 0.6)
#         --self.children.floating_sprite:draw_shader('dissolve', nil, nil, nil, self.children.center, scale_mod, rotate_mod)
#     end
# '''
# match_indent = true

# [[patches]]
# [patches.pattern]
# target = "card.lua"
# pattern = '''
# G.shared_shadow = self.sprite_facing == 'front' and self.children.center or self.children.back'''
# position = "before"
# payload = '''
# if self.blueprint_sprite_copy and Blueprint.is_brainstorm(self) then
#     Blueprint.brainstorm_sprite.role.draw_major = self
# end'''
# match_indent = true

# [[patches]]
# [patches.pattern]
# target = "card.lua"
# pattern = '''
# G.shared_shadow:draw_shader('dissolve', self.shadow_height)'''
# position = "at"
# payload = '''
# if self.blueprint_sprite_copy and Blueprint.is_brainstorm(self) then
#     Blueprint.brainstorm_sprite.role.draw_major = self
#     Blueprint.brainstorm_sprite.ARGS.draw_from_offset = nil
#     local other_obj = self.children.center
#     -- shadow_height doesn't work when drawing sprite from other_obj, so we have to add offsets manually
#     local scale = other_obj.VT.scale*0.2*self.shadow_height
#     local rotation = nil
#     local dx = - other_obj.shadow_parrallax.x*self.shadow_height
#     local dy = - other_obj.shadow_parrallax.y*self.shadow_height

#     Blueprint.brainstorm_sprite:draw_shader('dissolve', self.shadow_height, nil, nil, other_obj, scale, rotation, dx, dy)
# else
#     G.shared_shadow:draw_shader('dissolve', self.shadow_height)
# end
# '''
# match_indent = true

# [[patches]]
# [patches.pattern]
# target = "card.lua"
# pattern = '''
# self.children.center:draw_shader('dissolve')'''
# position = "before"
# payload = '''
# if self.blueprint_sprite_copy and Blueprint.is_brainstorm(self) then
#     Blueprint.brainstorm_sprite:draw_shader('dissolve', nil, nil, nil, self.children.center)
# end
# '''
# match_indent = true

# [[patches]]
# [patches.regex]
# target = "card.lua"
# pattern = '''
# (?<indent>[ \t]*)self\.children\.center:draw_shader\((?<args_center>[^\n]*)\)
# [ \t]*if self\.children\.front(?<then>[^\n]*)
# [ \t]*    self\.children\.front:draw_shader(?<args_front>[^\n]*)
# [ \t]*end'''
# position = "before"
# payload = '''
# if self.blueprint_sprite_copy and Blueprint.is_brainstorm(self) then
#     Blueprint.brainstorm_sprite:draw_shader($args_center, nil, self.children.center)
# end
# '''
# line_prepend = '$indent'



