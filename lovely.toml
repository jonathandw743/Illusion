[manifest]
version = "1.0.0"
dump_lua = true
priority = 6969

# [[patches]]
# [patches.module]
# source = "internal/init.lua"
# before = "main.lua"
# name = "blueprint.init"

# # Add core functionality
# [[patches]]
# [patches.copy]
# target = "main.lua"
# position = "append"
# sources = [
#     "blueprint.lua",
# ]

# [[patches]]
# [patches.pattern]
# target = "game.lua"
# pattern = '''love.graphics.setDefaultFilter(
#     self.SETTINGS.GRAPHICS.texture_scaling == 1 and 'nearest' or 'linear',
#     self.SETTINGS.GRAPHICS.texture_scaling == 1 and 'nearest' or 'linear', 1)'''
# position = "at"
# payload = '''
# love.graphics.setDefaultFilter(
#     self.SETTINGS.GRAPHICS.texture_scaling == 1 and 'linear' or 'linear',
#     self.SETTINGS.GRAPHICS.texture_scaling == 1 and 'linear' or 'linear', 1)'''
# match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''
            self.SHADERS[shader_name] = love.graphics.newShader("resources/shaders/"..filename)
'''
position = "after"
payload = '''
            if shader_name == "polychrome" then
                self.SHADERS["polychrome"] = love.graphics.newShader[[
#if defined(VERTEX) || __VERSION__ > 100 || defined(GL_FRAGMENT_PRECISION_HIGH)
	#define MY_HIGHP_OR_MEDIUMP highp
#else
	#define MY_HIGHP_OR_MEDIUMP mediump
#endif

extern MY_HIGHP_OR_MEDIUMP vec2 polychrome;
extern MY_HIGHP_OR_MEDIUMP number dissolve;
extern MY_HIGHP_OR_MEDIUMP number time;
extern MY_HIGHP_OR_MEDIUMP vec4 texture_details;
extern MY_HIGHP_OR_MEDIUMP vec2 image_details;
extern bool shadow;
extern MY_HIGHP_OR_MEDIUMP vec4 burn_colour_1;
extern MY_HIGHP_OR_MEDIUMP vec4 burn_colour_2;

vec4 dissolve_mask(vec4 tex, vec2 texture_coords, vec2 uv)
{
    if (dissolve < 0.001) {
        return vec4(shadow ? vec3(0.,0.,0.) : tex.xyz, shadow ? tex.a*0.3: tex.a);
    }

    float adjusted_dissolve = (dissolve*dissolve*(3.-2.*dissolve))*1.02 - 0.01; //Adjusting 0.0-1.0 to fall to -0.1 - 1.1 scale so the mask does not pause at extreme values

	float t = time * 10.0 + 2003.;
	vec2 floored_uv = (floor((uv*texture_details.ba)))/max(texture_details.b, texture_details.a);
    vec2 uv_scaled_centered = (floored_uv - 0.5) * 2.3 * max(texture_details.b, texture_details.a);
	
	vec2 field_part1 = uv_scaled_centered + 50.*vec2(sin(-t / 143.6340), cos(-t / 99.4324));
	vec2 field_part2 = uv_scaled_centered + 50.*vec2(cos( t / 53.1532),  cos( t / 61.4532));
	vec2 field_part3 = uv_scaled_centered + 50.*vec2(sin(-t / 87.53218), sin(-t / 49.0000));

    float field = (1.+ (
        cos(length(field_part1) / 19.483) + sin(length(field_part2) / 33.155) * cos(field_part2.y / 15.73) +
        cos(length(field_part3) / 27.193) * sin(field_part3.x / 21.92) ))/2.;
    vec2 borders = vec2(0.2, 0.8);

    float res = (.5 + .5* cos( (adjusted_dissolve) / 82.612 + ( field + -.5 ) *3.14))
    - (floored_uv.x > borders.y ? (floored_uv.x - borders.y)*(5. + 5.*dissolve) : 0.)*(dissolve)
    - (floored_uv.y > borders.y ? (floored_uv.y - borders.y)*(5. + 5.*dissolve) : 0.)*(dissolve)
    - (floored_uv.x < borders.x ? (borders.x - floored_uv.x)*(5. + 5.*dissolve) : 0.)*(dissolve)
    - (floored_uv.y < borders.x ? (borders.x - floored_uv.y)*(5. + 5.*dissolve) : 0.)*(dissolve);

    if (tex.a > 0.01 && burn_colour_1.a > 0.01 && !shadow && res < adjusted_dissolve + 0.8*(0.5-abs(adjusted_dissolve-0.5)) && res > adjusted_dissolve) {
        if (!shadow && res < adjusted_dissolve + 0.5*(0.5-abs(adjusted_dissolve-0.5)) && res > adjusted_dissolve) {
            tex.rgba = burn_colour_1.rgba;
        } else if (burn_colour_2.a > 0.01) {
            tex.rgba = burn_colour_2.rgba;
        }
    }

    return vec4(shadow ? vec3(0.,0.,0.) : tex.xyz, res > adjusted_dissolve ? (shadow ? tex.a*0.3: tex.a) : .0);
}

number hue(number s, number t, number h)
{
	number hs = mod(h, 1.)*6.;
	if (hs < 1.) return (t-s) * hs + s;
	if (hs < 3.) return t;
	if (hs < 4.) return (t-s) * (4.-hs) + s;
	return s;
}

vec4 RGB(vec4 c)
{
	if (c.y < 0.0001)
		return vec4(vec3(c.z), c.a);

	number t = (c.z < .5) ? c.y*c.z + c.z : -c.y*c.z + (c.y+c.z);
	number s = 2.0 * c.z - t;
	return vec4(hue(s,t,c.x + 1./3.), hue(s,t,c.x), hue(s,t,c.x - 1./3.), c.w);
}

vec4 HSL(vec4 c)
{
	number low = min(c.r, min(c.g, c.b));
	number high = max(c.r, max(c.g, c.b));
	number delta = high - low;
	number sum = high+low;

	vec4 hsl = vec4(.0, .0, .5 * sum, c.a);
	if (delta == .0)
		return hsl;

	hsl.y = (hsl.z < .5) ? delta / sum : delta / (2.0 - sum);

	if (high == c.r)
		hsl.x = (c.g - c.b) / delta;
	else if (high == c.g)
		hsl.x = (c.b - c.r) / delta + 2.0;
	else
		hsl.x = (c.r - c.g) / delta + 4.0;

	hsl.x = mod(hsl.x / 6., 1.);
	return hsl;
}

vec4 effect( vec4 colour, Image texture, vec2 texture_coords, vec2 screen_coords )
{
    vec4 tex = Texel(texture, texture_coords);
	vec2 uv = (((texture_coords)*(image_details)) - texture_details.xy*texture_details.ba)/texture_details.ba;

	number low = min(tex.r, min(tex.g, tex.b));
    number high = max(tex.r, max(tex.g, tex.b));
	number delta = high - low;

	number saturation_fac = 1. - max(0., 0.05*(1.1-delta));

	vec4 hsl = HSL(vec4(tex.r*saturation_fac, tex.g*saturation_fac, tex.b, tex.a));

	float t = polychrome.y*2.221 + time;
	vec2 floored_uv = (floor((uv*texture_details.ba)))/texture_details.ba;
    vec2 uv_scaled_centered = (floored_uv - 0.5) * 50.;
	
	vec2 field_part1 = uv_scaled_centered + 50.*vec2(sin(-t / 143.6340), cos(-t / 99.4324));
	vec2 field_part2 = uv_scaled_centered + 50.*vec2(cos( t / 53.1532),  cos( t / 61.4532));
	vec2 field_part3 = uv_scaled_centered + 50.*vec2(sin(-t / 87.53218), sin(-t / 49.0000));

    float field = (1.+ (
        cos(length(field_part1) / 19.483) + sin(length(field_part2) / 33.155) * cos(field_part2.y / 15.73) +
        cos(length(field_part3) / 27.193) * sin(field_part3.x / 21.92) ))/2.;

    float res = (.5 + .5* cos( (polychrome.x) * 2.612 + ( field + -.5 ) *3.14));
	hsl.x = hsl.x+ res + polychrome.y*0.04;
	hsl.y = min(0.6,hsl.y+0.5);

    tex.rgb = RGB(hsl).rgb;

	if (tex[3] < 0.7)
		tex[3] = tex[3]/3.;
	return dissolve_mask(tex*colour, texture_coords, uv);
}

extern MY_HIGHP_OR_MEDIUMP vec2 mouse_screen_pos;
extern MY_HIGHP_OR_MEDIUMP float hovering;
extern MY_HIGHP_OR_MEDIUMP float screen_scale;

#ifdef VERTEX
vec4 position( mat4 transform_projection, vec4 vertex_position )
{
    if (hovering <= 0.){
        return transform_projection * vertex_position;
    }
    float mid_dist = length(vertex_position.xy - 0.5*love_ScreenSize.xy)/length(love_ScreenSize.xy);
    vec2 mouse_offset = (vertex_position.xy - mouse_screen_pos.xy)/screen_scale;
    float scale = 0.2*(-0.03 - 0.3*max(0., 0.3-mid_dist))
                *hovering*(length(mouse_offset)*length(mouse_offset))/(2. -mid_dist);

    return transform_projection * vertex_position + vec4(0,0,0,scale);
}
#endif
]]
            else
                self.SHADERS[shader_name] = love.graphics.newShader("resources/shaders/"..filename)
            end
'''
match_indent = false

# [[patches]]
# [patches.pattern]
# target = "game.lua"
# pattern = '''
# local shader_files = love.filesystem.getDirectoryItems("resources/shaders")'''
# position = "before"
# payload = '''
# Blueprint.load_shaders()
# '''
# match_indent = true

# Test for joker menu
#[[patches]]
#[patches.pattern]
#target = "functions/UI_definitions.lua"
#pattern = '''
#function G.UIDEF.card_focus_ui(card)'''
#position = "after"
#payload = '''
#    local name = "I dunno"
#    if card.config and card.config.center then
#        name = card.config.center.key
#    end
#    Blueprint.log("hi hello im " .. tostring(name).. ". highlighed: "..tostring(card.highlighted))
#'''
#match_indent = true

# [[patches]]
# [patches.pattern]
# target = "card.lua"
# pattern = '''
# elseif self.sprite_facing == 'back' then'''
# position = "before"
# payload = '''
#     if self.blueprint_sprite_copy and self.children.floating_sprite then
#         local scale_mod = 0.07 + 0.02*math.sin(1.8*G.TIMERS.REAL) + 0.00*math.sin((G.TIMERS.REAL - math.floor(G.TIMERS.REAL))*math.pi*14)*(1 - (G.TIMERS.REAL - math.floor(G.TIMERS.REAL)))^3
#         local rotate_mod = 0.05*math.sin(1.219*G.TIMERS.REAL) + 0.00*math.sin((G.TIMERS.REAL)*math.pi*5)*(1 - (G.TIMERS.REAL - math.floor(G.TIMERS.REAL)))^2

#         if self.blueprint_copy_key == 'j_hologram' then
#             self.hover_tilt = self.hover_tilt*1.5
#             self.children.floating_sprite:draw_shader('hologram', nil, self.ARGS.send_to_shader, nil, self.children.center, 2*scale_mod, 2*rotate_mod)
#             self.hover_tilt = self.hover_tilt/1.5
#         else
#             self.children.floating_sprite:draw_shader('dissolve',0, nil, nil, self.children.center,scale_mod, rotate_mod,nil, 0.1 + 0.03*math.sin(1.8*G.TIMERS.REAL),nil, 0.6)
#             self.children.floating_sprite:draw_shader('dissolve', nil, nil, nil, self.children.center, scale_mod, rotate_mod)
#         end
#         --self.children.floating_sprite:draw_shader('dissolve',   0, nil, nil, self.children.center, scale_mod, rotate_mod, nil, 0.1 + 0.03 * math.sin(1.8 * G.TIMERS.REAL), nil, 0.6)
#         --self.children.floating_sprite:draw_shader('dissolve', nil, nil, nil, self.children.center, scale_mod, rotate_mod)
#     end
# '''
# match_indent = true

# [[patches]]
# [patches.pattern]
# target = "card.lua"
# pattern = '''
# G.shared_shadow = self.sprite_facing == 'front' and self.children.center or self.children.back'''
# position = "before"
# payload = '''
# if self.blueprint_sprite_copy and Blueprint.is_brainstorm(self) then
#     Blueprint.brainstorm_sprite.role.draw_major = self
# end'''
# match_indent = true

# [[patches]]
# [patches.pattern]
# target = "card.lua"
# pattern = '''
# G.shared_shadow:draw_shader('dissolve', self.shadow_height)'''
# position = "at"
# payload = '''
# if self.blueprint_sprite_copy and Blueprint.is_brainstorm(self) then
#     Blueprint.brainstorm_sprite.role.draw_major = self
#     Blueprint.brainstorm_sprite.ARGS.draw_from_offset = nil
#     local other_obj = self.children.center
#     -- shadow_height doesn't work when drawing sprite from other_obj, so we have to add offsets manually
#     local scale = other_obj.VT.scale*0.2*self.shadow_height
#     local rotation = nil
#     local dx = - other_obj.shadow_parrallax.x*self.shadow_height
#     local dy = - other_obj.shadow_parrallax.y*self.shadow_height

#     Blueprint.brainstorm_sprite:draw_shader('dissolve', self.shadow_height, nil, nil, other_obj, scale, rotation, dx, dy)
# else
#     G.shared_shadow:draw_shader('dissolve', self.shadow_height)
# end
# '''
# match_indent = true

# [[patches]]
# [patches.pattern]
# target = "card.lua"
# pattern = '''
# self.children.center:draw_shader('dissolve')'''
# position = "before"
# payload = '''
# if self.blueprint_sprite_copy and Blueprint.is_brainstorm(self) then
#     Blueprint.brainstorm_sprite:draw_shader('dissolve', nil, nil, nil, self.children.center)
# end
# '''
# match_indent = true

# [[patches]]
# [patches.regex]
# target = "card.lua"
# pattern = '''
# (?<indent>[ \t]*)self\.children\.center:draw_shader\((?<args_center>[^\n]*)\)
# [ \t]*if self\.children\.front(?<then>[^\n]*)
# [ \t]*    self\.children\.front:draw_shader(?<args_front>[^\n]*)
# [ \t]*end'''
# position = "before"
# payload = '''
# if self.blueprint_sprite_copy and Blueprint.is_brainstorm(self) then
#     Blueprint.brainstorm_sprite:draw_shader($args_center, nil, self.children.center)
# end
# '''
# line_prepend = '$indent'



